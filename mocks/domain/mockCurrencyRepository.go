// Code generated by MockGen. DO NOT EDIT.
// Source: domain/currency.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	errs "github.com/yescorihuela/beers_app/errs"
	reflect "reflect"
)

// MockCurrencyRepository is a mock of CurrencyRepository interface
type MockCurrencyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCurrencyRepositoryMockRecorder
}

// MockCurrencyRepositoryMockRecorder is the mock recorder for MockCurrencyRepository
type MockCurrencyRepositoryMockRecorder struct {
	mock *MockCurrencyRepository
}

// NewMockCurrencyRepository creates a new mock instance
func NewMockCurrencyRepository(ctrl *gomock.Controller) *MockCurrencyRepository {
	mock := &MockCurrencyRepository{ctrl: ctrl}
	mock.recorder = &MockCurrencyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCurrencyRepository) EXPECT() *MockCurrencyRepositoryMockRecorder {
	return m.recorder
}

// ConvertPrice mocks base method
func (m *MockCurrencyRepository) ConvertPrice(fromCurrency, toCurrency string, value float32) (*float32, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertPrice", fromCurrency, toCurrency, value)
	ret0, _ := ret[0].(*float32)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// ConvertPrice indicates an expected call of ConvertPrice
func (mr *MockCurrencyRepositoryMockRecorder) ConvertPrice(fromCurrency, toCurrency, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertPrice", reflect.TypeOf((*MockCurrencyRepository)(nil).ConvertPrice), fromCurrency, toCurrency, value)
}
