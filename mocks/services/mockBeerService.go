// Code generated by MockGen. DO NOT EDIT.
// Source: services/beerService.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	api "github.com/yescorihuela/beers_app/api"
	errs "github.com/yescorihuela/beers_app/errs"
	services "github.com/yescorihuela/beers_app/services"
	reflect "reflect"
)

// MockBeerService is a mock of BeerService interface
type MockBeerService struct {
	ctrl     *gomock.Controller
	recorder *MockBeerServiceMockRecorder
}

// MockBeerServiceMockRecorder is the mock recorder for MockBeerService
type MockBeerServiceMockRecorder struct {
	mock *MockBeerService
}

// NewMockBeerService creates a new mock instance
func NewMockBeerService(ctrl *gomock.Controller) *MockBeerService {
	mock := &MockBeerService{ctrl: ctrl}
	mock.recorder = &MockBeerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBeerService) EXPECT() *MockBeerServiceMockRecorder {
	return m.recorder
}

// GetAllBeers mocks base method
func (m *MockBeerService) GetAllBeers() ([]api.BeerResponse, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBeers")
	ret0, _ := ret[0].([]api.BeerResponse)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// GetAllBeers indicates an expected call of GetAllBeers
func (mr *MockBeerServiceMockRecorder) GetAllBeers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBeers", reflect.TypeOf((*MockBeerService)(nil).GetAllBeers))
}

// GetBeer mocks base method
func (m *MockBeerService) GetBeer(id int) (*api.BeerResponse, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBeer", id)
	ret0, _ := ret[0].(*api.BeerResponse)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// GetBeer indicates an expected call of GetBeer
func (mr *MockBeerServiceMockRecorder) GetBeer(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBeer", reflect.TypeOf((*MockBeerService)(nil).GetBeer), id)
}

// Create mocks base method
func (m *MockBeerService) Create(req api.NewBeerRequest) (*api.BeerResponse, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", req)
	ret0, _ := ret[0].(*api.BeerResponse)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockBeerServiceMockRecorder) Create(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBeerService)(nil).Create), req)
}

// GetBeerByBox mocks base method
func (m *MockBeerService) GetBeerByBox(c services.CurrencyService, id int, quantity float32, toCurrency string) (*api.BeerBoxTotalPrice, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBeerByBox", c, id, quantity, toCurrency)
	ret0, _ := ret[0].(*api.BeerBoxTotalPrice)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// GetBeerByBox indicates an expected call of GetBeerByBox
func (mr *MockBeerServiceMockRecorder) GetBeerByBox(c, id, quantity, toCurrency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBeerByBox", reflect.TypeOf((*MockBeerService)(nil).GetBeerByBox), c, id, quantity, toCurrency)
}
